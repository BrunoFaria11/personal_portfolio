"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/http");
var core_1 = require("@angular/core");
var api_1 = require("./api/api");
var body_formatter_1 = require("./body-formatter");
;
var AccountService = (function () {
    function AccountService(apiService) {
        this.apiService = apiService;
    }
    AccountService.prototype.getAuthorised = function (path) {
        return this.apiService.authorised('GET', path);
    };
    AccountService.prototype.login = function (details) {
        var options = {
            headers: new http_1.Headers({ 'Content-Type': 'application/json' })
        };
        return this.apiService.post("me/login", details, options);
    };
    AccountService.prototype.logout = function () {
        return this.apiService.authorised('POST', 'auth/revoke');
    };
    AccountService.prototype.spotlight = function () {
        return this.getAuthorised("me/spotlight");
    };
    AccountService.prototype.lists = function () {
        return this.getAuthorised("me/lists");
    };
    AccountService.prototype.listById = function (id) {
        return this.getAuthorised("me/lists/" + id);
    };
    AccountService.prototype.radios = function (offset, limit) {
        if (offset === undefined && limit === undefined) {
            return this.getAuthorised('me/radios');
        }
        if (limit === undefined) {
            limit = offset;
            return this.getAuthorised("me/radios/0/" + limit);
        }
        return this.getAuthorised("me/radios/" + offset + "/" + limit);
    };
    AccountService.prototype.radio = function (id) { return this.getAuthorised("me/lists/" + id); };
    AccountService.prototype.getRequestOptions = function () {
        return {
            headers: new http_1.Headers({
                'Content-Type': 'application/x-www-form-urlencoded'
            })
        };
    };
    AccountService.prototype.interact = function (params) {
        var serialisedAction = Action[params.action];
        var serialisedContainerType = ContainerType[params.container_type];
        var serialisedParams = body_formatter_1.urlEncoded({
            id_track: params.id_track,
            id_container: params.id_container,
            container_type: serialisedContainerType,
            action: serialisedAction
        });
        return this.apiService.authorised('POST', 'me/actions', serialisedParams, this.getRequestOptions());
    };
    return AccountService;
}());
AccountService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [api_1.ApiService])
], AccountService);
exports.AccountService = AccountService;
var ContainerType;
(function (ContainerType) {
    ContainerType[ContainerType["list"] = 0] = "list";
})(ContainerType = exports.ContainerType || (exports.ContainerType = {}));
var Action;
(function (Action) {
    Action[Action["like"] = 0] = "like";
    Action[Action["dislike"] = 1] = "dislike";
    Action[Action["skip"] = 2] = "skip";
})(Action = exports.Action || (exports.Action = {}));
//# sourceMappingURL=accounts.js.map