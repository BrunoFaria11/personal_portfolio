"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var testing_1 = require("@angular/core/testing");
var testing_2 = require("@angular/http/testing");
var http_1 = require("@angular/http");
var refresh_auth_token_service_1 = require("./refresh-auth-token-service");
var stubApiBaseUrl = 'http://example.com';
function stubResponse(mockBackend, response, assertRequest) {
    mockBackend.connections.subscribe(function (connection) {
        if (assertRequest) {
            assertRequest(connection.request);
        }
        if (response instanceof Error) {
            return connection.mockError(response);
        }
        connection.mockRespond(new http_1.Response(new http_1.ResponseOptions(response)));
    });
}
describe('Refresh auth token service', function () {
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            providers: [
                testing_2.MockBackend,
                http_1.BaseRequestOptions,
                {
                    provide: http_1.Http,
                    useFactory: function (backend, options) { return new http_1.Http(backend, options); },
                    deps: [testing_2.MockBackend, http_1.BaseRequestOptions]
                },
                {
                    provide: refresh_auth_token_service_1.RefreshAuthTokenService,
                    deps: [http_1.Http],
                    useFactory: function (http) { return new refresh_auth_token_service_1.RefreshAuthTokenService(http, stubApiBaseUrl); }
                }
            ]
        });
    });
    it('makes an http request to the refresh endpoint', testing_1.async(testing_1.inject([testing_2.MockBackend, refresh_auth_token_service_1.RefreshAuthTokenService], function (mockBackend, refreshService) {
        var authToken = 'authtoken';
        var refreshToken = 'refreshtoken';
        var refreshTokenResponse = {
            status: 200,
            body: {
                access_token: 'newAuthToken',
                refresh_token: 'newRefreshToken'
            }
        };
        stubResponse(mockBackend, refreshTokenResponse, function (request) {
            expect(request.url).toBe(stubApiBaseUrl + "/auth/refresh");
            expect(JSON.parse(request.getBody()))
                .toEqual({ refresh_token: refreshToken });
            expect(request.headers.getAll('Authorization'))
                .toEqual(["bearer " + authToken]);
            expect(request.headers.getAll('Content-Type'))
                .toEqual(['application/json']);
        });
        refreshService.refresh(authToken, refreshToken).subscribe();
    })));
    it('returns refreshed auth tokens from the api', testing_1.async(testing_1.inject([testing_2.MockBackend, refresh_auth_token_service_1.RefreshAuthTokenService], function (mockBackend, refreshService) {
        var refreshTokenResponse = {
            status: 200,
            body: {
                access_token: 'newAuthToken',
                refresh_token: 'newRefreshToken'
            }
        };
        stubResponse(mockBackend, refreshTokenResponse);
        refreshService.refresh('beep', 'boop')
            .subscribe(function (tokens) {
            expect(tokens.authToken)
                .toEqual(refreshTokenResponse.body.access_token);
            expect(tokens.refreshToken)
                .toEqual(refreshTokenResponse.body.refresh_token);
            expect(tokens.hasBeenRefreshed).toEqual(true);
        }, function (err) { return fail(err); });
    })));
    ['400', '500'].forEach(function (statusCode) {
        it("throws when the refresh endpoint returns http status " + statusCode, testing_1.async(testing_1.inject([testing_2.MockBackend, refresh_auth_token_service_1.RefreshAuthTokenService], function (mockBackend, refreshService) {
            var badRefreshTokenResponse = {
                status: statusCode
            };
            stubResponse(mockBackend, badRefreshTokenResponse);
            refreshService.refresh('beep', 'boop')
                .subscribe(function () { return fail(new Error('expected an error')); }, function (err) { return expect(err).toBeTruthy(); });
        })));
    });
    it('throws when the refresh endpoint errors', testing_1.async(testing_1.inject([testing_2.MockBackend, refresh_auth_token_service_1.RefreshAuthTokenService], function (mockBackend, refreshService) {
        stubResponse(mockBackend, new Error('an error'));
        refreshService.refresh('beep', 'boop')
            .subscribe(function () { return fail(new Error('expected an error')); }, function (err) { return expect(err).toBeTruthy(); });
    })));
});
//# sourceMappingURL=refresh-auth-token-service.test.js.map