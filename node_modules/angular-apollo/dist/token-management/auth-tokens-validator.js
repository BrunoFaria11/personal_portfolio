"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/http");
var core_1 = require("@angular/core");
var Rx_1 = require("rxjs/Rx");
var refresh_auth_token_service_1 = require("./refresh-auth-token-service");
var authorisation_tokens_1 = require("./authorisation-tokens");
var angular2_jwt_1 = require("angular2-jwt");
var jwtHelper = new angular2_jwt_1.JwtHelper();
var AuthenticationError = (function (_super) {
    __extends(AuthenticationError, _super);
    function AuthenticationError(options) {
        var _this = _super.call(this, 'Authentication error') || this;
        Object.setPrototypeOf(_this, AuthenticationError.prototype);
        Object.assign(_this, options);
        return _this;
    }
    return AuthenticationError;
}(Error));
exports.AuthenticationError = AuthenticationError;
var JwtAuthTokensValidator = (function () {
    function JwtAuthTokensValidator(http, apiBaseUrl) {
        this.http = http;
        this.refreshAuthTokenService = new refresh_auth_token_service_1.RefreshAuthTokenService(http, apiBaseUrl);
    }
    JwtAuthTokensValidator.prototype.validateTokens = function (authToken, refreshToken) {
        var self = this;
        return this.isAuthTokenValid(authToken)
            .map(function () { return new authorisation_tokens_1.AuthorisationTokens(authToken, refreshToken); })
            .catch(function (err) {
            if (err.expiredToken) {
                return self.refreshAuthTokenService.refresh(authToken, refreshToken);
            }
            throw err;
        });
    };
    JwtAuthTokensValidator.prototype.isAuthTokenValid = function (token) {
        if (!token) {
            return Rx_1.Observable.throw(new AuthenticationError({ missingToken: true }));
        }
        try {
            var isExpired = jwtHelper.isTokenExpired(token);
            return isExpired ?
                Rx_1.Observable.throw(new AuthenticationError({ expiredToken: true })) :
                Rx_1.Observable.from([true]);
        }
        catch (e) {
            return Rx_1.Observable.throw(new AuthenticationError({ badToken: true }));
        }
    };
    return JwtAuthTokensValidator;
}());
JwtAuthTokensValidator = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http, String])
], JwtAuthTokensValidator);
exports.JwtAuthTokensValidator = JwtAuthTokensValidator;
//# sourceMappingURL=auth-tokens-validator.js.map