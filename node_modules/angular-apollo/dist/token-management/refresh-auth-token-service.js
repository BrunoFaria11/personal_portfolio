"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
require("rxjs/add/operator/map");
var authorisation_tokens_1 = require("./authorisation-tokens");
var RefreshAuthTokenService = (function () {
    function RefreshAuthTokenService(http, apiBaseUrl) {
        this.http = http;
        this.refreshUrl = apiBaseUrl + "/auth/refresh";
    }
    RefreshAuthTokenService.prototype.refresh = function (authToken, refreshToken) {
        var body = JSON.stringify({ refresh_token: refreshToken });
        var options = this.getRequestOptions(authToken);
        return this.http.post(this.refreshUrl, body, options)
            .map(function (res) {
            if (res.status !== 200) {
                throw new Error("Bad status code: " + res.status);
            }
            var response = res.json();
            return new authorisation_tokens_1.AuthorisationTokens(response.access_token, response.refresh_token, true);
        });
    };
    RefreshAuthTokenService.prototype.getRequestOptions = function (authToken) {
        var headers = new http_1.Headers();
        headers.append('Content-Type', 'application/json');
        headers.append('Authorization', "bearer " + authToken);
        return { headers: headers };
    };
    return RefreshAuthTokenService;
}());
RefreshAuthTokenService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http, String])
], RefreshAuthTokenService);
exports.RefreshAuthTokenService = RefreshAuthTokenService;
//# sourceMappingURL=refresh-auth-token-service.js.map