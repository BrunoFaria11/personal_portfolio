"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = require("./api/api");
var http_1 = require("@angular/http");
var authorised_request_1 = require("./api/authorised-request");
var index_1 = require("./index");
var token_store_1 = require("./token-stores/token-store");
var auth_tokens_validator_1 = require("./token-management/auth-tokens-validator");
var refresh_auth_token_service_1 = require("./token-management/refresh-auth-token-service");
var defaultOptions = {
    useTokenStore: provideDefaultTokenStore,
    baseUrl: 'https://preprod-cdiscount.snowite.fr'
};
function provideApollo(apolloOptions) {
    apolloOptions = apolloOptions || { baseUrl: defaultOptions.baseUrl };
    var opts = Object.assign({}, defaultOptions, apolloOptions);
    return [
        opts.useTokenStore(),
        {
            provide: api_1.ApiService,
            useFactory: function (http, tokenStore) {
                var authorisation = new authorised_request_1.SecureRequest(tokenStore, new auth_tokens_validator_1.JwtAuthTokensValidator(http, opts.baseUrl));
                return new api_1.ApiService(http, apolloOptions.baseUrl, authorisation);
            },
            deps: [http_1.Http, token_store_1.TokenStore]
        },
        index_1.AccountService,
        index_1.CustomRadioService,
        index_1.ListService,
        {
            provide: refresh_auth_token_service_1.RefreshAuthTokenService,
            deps: [http_1.Http],
            useFactory: function (http) {
                return new refresh_auth_token_service_1.RefreshAuthTokenService(http, apolloOptions.baseUrl);
            }
        }
    ];
}
exports.provideApollo = provideApollo;
function attachTokenStoreEvents(tokenStore) {
    tokenStore.events.subscribe(function (event) {
        if (event.hasBeenRefreshed) {
            tokenStore.save(event.authToken, event.refreshToken);
        }
    }, function (error) { return tokenStore.clear(); });
}
exports.attachTokenStoreEvents = attachTokenStoreEvents;
function provideDefaultTokenStore() {
    return {
        provide: token_store_1.TokenStore,
        useFactory: function () {
            var tokenStore = new token_store_1.TokenStore();
            attachTokenStoreEvents(tokenStore);
            return tokenStore;
        }
    };
}
//# sourceMappingURL=provide-apollo.js.map