"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
require("rxjs/add/operator/map");
require("rxjs/add/operator/mergeMap");
var response_mapper_1 = require("./response-mapper");
var angular2_uuid_1 = require("angular2-uuid");
var ApiService = (function () {
    function ApiService(http, baseUrl, secure) {
        this.http = http;
        this.baseUrl = baseUrl;
        this.secure = secure;
    }
    ApiService.prototype.authorised = function (method, path, data, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        return this.secure.authorisedRequest(options, function (options) {
            return _this.call(method, path, data, options);
        });
    };
    ApiService.prototype.call = function (method, path, data, options) {
        if (options === void 0) { options = {}; }
        var uuid = angular2_uuid_1.UUID.UUID();
        options.headers = options.headers || new http_1.Headers();
        options.headers.set('X-Transaction-Id', uuid);
        method = method.toLowerCase();
        if (['get', 'delete'].indexOf(method) !== -1) {
            return this.http[method](this.getPath(path), options).map(response_mapper_1.mapResponse);
        }
        return this.http[method](this.getPath(path), data, options).map(response_mapper_1.mapResponse);
    };
    ApiService.prototype.post = function (path, data, options) {
        options = options || {};
        options = Object.assign({
            headers: new http_1.Headers({ 'Content-Type': 'application/json' })
        }, options);
        var body = (typeof data === 'object') ? JSON.stringify(data) : data;
        return this.call('POST', path, body, options);
    };
    ApiService.prototype.getPath = function (path) {
        return this.baseUrl + "/" + path;
    };
    return ApiService;
}());
ApiService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http, String, Object])
], ApiService);
exports.ApiService = ApiService;
//# sourceMappingURL=api.js.map