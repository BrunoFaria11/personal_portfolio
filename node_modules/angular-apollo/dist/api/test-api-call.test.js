"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var api_1 = require("./api");
var testing_1 = require("@angular/http/testing");
var testing_2 = require("@angular/core/testing");
var http_1 = require("@angular/http");
var baseUrl = 'http://www.example.com';
function setupProviders() {
    return [
        {
            provide: api_1.ApiService,
            deps: [http_1.Http],
            useFactory: function (http, config) {
                return new api_1.ApiService(http, baseUrl, {
                    authorisedRequest: function (options, callback) { return callback(options); }
                });
            }
        },
        testing_1.MockBackend,
        http_1.BaseRequestOptions,
        {
            provide: http_1.Http,
            useFactory: function (backend, options) { return new http_1.Http(backend, options); },
            deps: [testing_1.MockBackend, http_1.BaseRequestOptions]
        }
    ];
}
exports.setupProviders = setupProviders;
var TestApi = (function () {
    function TestApi() {
        this.respondWith();
    }
    TestApi.prototype.respondWith = function (responseOpts) {
        responseOpts = responseOpts || { status: 200 };
        this.response = new http_1.Response(new http_1.ResponseOptions(responseOpts));
        return this;
    };
    TestApi.prototype.respondWithError = function (error) {
        this.error = error;
        return this;
    };
    TestApi.prototype.expect = function (responseExpectation) {
        this.responseExpectation = responseExpectation;
        return this;
    };
    TestApi.prototype.methodMatchFailMessage = function (actualMethod) {
        return "expected " + http_1.RequestMethod[this.responseExpectation.method] +
            (" but was " + http_1.RequestMethod[actualMethod]);
    };
    TestApi.prototype.test = function (t) {
        var _this = this;
        return testing_2.async(testing_2.inject([api_1.ApiService, testing_1.MockBackend], function (api, mockBackEnd) {
            mockBackEnd.connections
                .subscribe(function (connection) {
                expect(connection.request.method)
                    .toEqual(_this.responseExpectation.method, _this.methodMatchFailMessage(connection.request.method));
                expect(connection.request.url)
                    .toEqual(baseUrl + "/" + _this.responseExpectation.path);
                if (_this.responseExpectation.body) {
                    var requestBody = connection.request.getBody();
                    if (typeof _this.responseExpectation.body === 'object') {
                        requestBody = JSON.stringify(JSON.parse(connection.request.getBody()));
                        _this.responseExpectation.body = JSON.stringify(_this.responseExpectation.body);
                    }
                    expect(requestBody)
                        .toEqual(_this.responseExpectation.body);
                }
                if (_this.responseExpectation.headers) {
                    Object.keys(_this.responseExpectation.headers)
                        .forEach(function (header) {
                        expect(connection.request
                            .headers.getAll(header))
                            .toEqual(_this.responseExpectation.headers[header]);
                    });
                }
                if (_this.error) {
                    return connection.mockError(_this.error);
                }
                connection.mockRespond(_this.response);
            });
            return t(api);
        }));
    };
    return TestApi;
}());
exports.TestApi = TestApi;
//# sourceMappingURL=test-api-call.test.js.map