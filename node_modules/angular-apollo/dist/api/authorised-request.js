"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
var auth_tokens_validator_1 = require("../token-management/auth-tokens-validator");
require("rxjs/add/operator/map");
var ApiAuthorisationError = (function (_super) {
    __extends(ApiAuthorisationError, _super);
    function ApiAuthorisationError(options) {
        var _this = _super.call(this, 'API Authorisation error') || this;
        Object.assign(_this, options);
        return _this;
    }
    return ApiAuthorisationError;
}(Error));
exports.ApiAuthorisationError = ApiAuthorisationError;
var SecureRequest = (function () {
    function SecureRequest(apiTokenStore, authTokensValidator) {
        this.apiTokenStore = apiTokenStore;
        this.authTokensValidator = authTokensValidator;
    }
    SecureRequest.prototype.authorisedRequest = function (options, whenAuthorised) {
        var _this = this;
        return this.apiTokenStore.get().flatMap(function (tokens) {
            if (!tokens) {
                _this.apiTokenStore.events.error(new ApiAuthorisationError({
                    missingTokens: true
                }));
                return Rx_1.Observable.empty();
            }
            return _this.authTokensValidator
                .validateTokens(tokens.authToken, tokens.refreshToken)
                .flatMap(function (validatedTokens) {
                options.headers = options.headers || new http_1.Headers();
                options.headers.set('Authorization', "bearer " + validatedTokens.authToken);
                if (validatedTokens.hasBeenRefreshed) {
                    _this.apiTokenStore.events.next(validatedTokens);
                }
                return whenAuthorised(options);
            })
                .catch(function (err) {
                if (err instanceof auth_tokens_validator_1.AuthenticationError || err.status === 403) {
                    _this.apiTokenStore.events.error(new ApiAuthorisationError({
                        invalidAuthToken: true
                    }));
                    return Rx_1.Observable.empty();
                }
                throw err;
            });
        });
    };
    return SecureRequest;
}());
SecureRequest = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [Object, Object])
], SecureRequest);
exports.SecureRequest = SecureRequest;
//# sourceMappingURL=authorised-request.js.map