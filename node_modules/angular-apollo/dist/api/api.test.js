"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/http");
var testing_1 = require("@angular/core/testing");
var test_api_call_test_1 = require("./test-api-call.test");
describe('ApiService', function () {
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            providers: test_api_call_test_1.setupProviders()
        });
    });
    it('returns the json when response is 200 for post requests', new test_api_call_test_1.TestApi()
        .expect({
        path: 'lists/666',
        method: http_1.RequestMethod.Post,
        body: { bodyData: 'fleh' },
        headers: { someHeader: ['blah'] }
    })
        .respondWith({
        body: { id: 123 },
        status: 200
    })
        .test(function (api) {
        var options = {
            headers: new http_1.Headers({ someHeader: 'blah' })
        };
        api.post('lists/666', { bodyData: 'fleh' }, options)
            .subscribe(function (data) { return expect(data).toEqual({ id: 123 }); });
    }));
    it('posts strings when a string is specified as data', new test_api_call_test_1.TestApi()
        .expect({
        path: 'lists/666',
        body: 'name=angular-apollo&version=x',
        headers: { someHeader: ['blah'] },
        method: http_1.RequestMethod.Post
    })
        .respondWith({
        body: { id: 123 },
        status: 200
    })
        .test(function (api) {
        var options = {
            headers: new http_1.Headers({ someHeader: 'blah' })
        };
        api.post('lists/666', 'name=angular-apollo&version=x', options)
            .subscribe(function (data) { return expect(data).toEqual({ id: 123 }); });
    }));
    it('returns the json when response is 200 for fetch requests', new test_api_call_test_1.TestApi()
        .expect({
        path: 'lists/666',
        headers: { someHeader: ['woo'] },
        method: http_1.RequestMethod.Get
    })
        .respondWith({
        body: { id: 123 },
        status: 200
    })
        .test(function (api) {
        var options = {
            headers: new http_1.Headers({ someHeader: 'woo' })
        };
        api.call('GET', 'lists/666', {}, options)
            .subscribe(function (data) { return expect(data).toEqual({ id: 123 }); });
    }));
    it('returns the json when response is 200 for delete requests', new test_api_call_test_1.TestApi()
        .expect({
        path: 'lists/666',
        headers: { someHeader: ['woo'] },
        method: http_1.RequestMethod.Delete
    })
        .respondWith({
        body: { id: 123 },
        status: 200
    })
        .test(function (api) {
        var options = {
            headers: new http_1.Headers({ someHeader: 'woo' })
        };
        api.call('DELETE', 'lists/666', {}, options)
            .subscribe(function (data) { return expect(data).toEqual({ id: 123 }); });
    }));
    it('returns the json when response is 200 for authorised fetch requests', new test_api_call_test_1.TestApi()
        .expect({
        path: 'lists/666',
        headers: { someHeader: ['wee'] },
        method: http_1.RequestMethod.Get
    })
        .respondWith({
        body: { id: 123 },
        status: 200
    })
        .test(function (api) {
        var options = {
            headers: new http_1.Headers({ someHeader: 'wee' })
        };
        api.authorised('GET', 'lists/666', {}, options)
            .subscribe(function (data) { return expect(data).toEqual({ id: 123 }); });
    }));
    it('throws an error when the post response body is not valid json', new test_api_call_test_1.TestApi()
        .expect({ path: 'blah', method: http_1.RequestMethod.Post })
        .respondWith({ body: 'not json' })
        .test(function (api) { return api.post('blah', 'request body')
        .subscribe(function (data) { }, function (err) { return expect(err).toEqual(jasmine.any(Error)); }); }));
    it('throws an error when the fetch response body is not valid json', new test_api_call_test_1.TestApi()
        .expect({ path: 'blah', method: http_1.RequestMethod.Get })
        .respondWith({ body: 'not json' })
        .test(function (api) { return api.call('GET', 'blah')
        .subscribe(function (data) { }, function (err) { return expect(err).toEqual(jasmine.any(Error)); }); }));
    it('throws an error when the authorised fetch response body is not valid json', new test_api_call_test_1.TestApi()
        .expect({ path: 'blah', method: http_1.RequestMethod.Get })
        .respondWith({ body: 'not json' })
        .test(function (api) { return api.authorised('GET', 'blah')
        .subscribe(function (data) { return fail(new Error('ApiService should error')); }, function (err) { return expect(err).toEqual(jasmine.any(Error)); }); }));
    var errorStatusCodes = [404, 500];
    errorStatusCodes.forEach(function (statusCode) {
        it("throws an error when post response is " + statusCode, new test_api_call_test_1.TestApi()
            .expect({ path: 'blah', method: http_1.RequestMethod.Post })
            .respondWith({ status: statusCode })
            .test(function (api) { return api.post('blah', {})
            .subscribe(function () { return fail(new Error('ApiService should error')); }, function (err) {
            expect(err).toEqual(jasmine.any(Error));
            expect(err.response.status).toEqual(statusCode);
        }); }));
        it("throws an error when fetch response is " + statusCode, new test_api_call_test_1.TestApi()
            .expect({ path: 'blah', method: http_1.RequestMethod.Get })
            .respondWith({ status: statusCode })
            .test(function (api) { return api.call('GET', 'blah')
            .subscribe(function () { return fail(new Error('ApiService should error')); }, function (err) {
            expect(err).toEqual(jasmine.any(Error));
            expect(err.response.status).toEqual(statusCode);
        }); }));
        it("throws an error when authorised fetch response is " + statusCode, new test_api_call_test_1.TestApi()
            .expect({ path: 'blah', method: http_1.RequestMethod.Get })
            .respondWith({ status: statusCode })
            .test(function (api) { return function (api) { return api.authorised('GET', 'blah')
            .subscribe(function () { return fail(new Error('ApiService should error')); }, function (err) {
            expect(err).toEqual(jasmine.any(Error));
            expect(err.response.status).toEqual(statusCode);
        }); }; }));
        it('fails post requests gracefully when the API is unavailable', new test_api_call_test_1.TestApi()
            .expect({ path: 'blah', method: http_1.RequestMethod.Post })
            .respondWithError(new Error('boom'))
            .test(function (api) { return api.call('POST', 'blah', {})
            .subscribe(function () { return fail(new Error('ApiService should error')); }, function (err) { return expect(err).toEqual(jasmine.any(Error)); }); }));
    });
    it('fails fetch requests gracefully when the API is unavailable', new test_api_call_test_1.TestApi()
        .expect({ path: 'blah', method: http_1.RequestMethod.Get })
        .respondWithError(new Error('boom'))
        .test(function (api) { return api.call('GET', 'blah')
        .subscribe(function () { return fail(new Error('ApiService should error')); }, function (err) { return expect(err).toEqual(jasmine.any(Error)); }); }));
    it('fails authorised fetch requests gracefully when the API is unavailable', new test_api_call_test_1.TestApi()
        .expect({ path: 'blah', method: http_1.RequestMethod.Get })
        .respondWithError(new Error('boom'))
        .test(function (api) { return api.authorised('GET', 'blah')
        .subscribe(function () { return fail(new Error('ApiService should error')); }, function (err) { return expect(err).toEqual(jasmine.any(Error)); }); }));
    it('returns the json when response is 200 for post requests', (function () {
        var url = 'me/customradios';
        var postBody = { bodyData: { radioId: 1234 } };
        var responseBody = { id: 123 };
        return new test_api_call_test_1.TestApi().expect({
            path: url,
            headers: { someHeader: ['blah'] },
            body: postBody,
            method: http_1.RequestMethod.Post
        })
            .respondWith({
            body: responseBody
        })
            .test(function (api) {
            var options = {
                headers: new http_1.Headers({ someHeader: 'blah' })
            };
            api.authorised('POST', url, postBody, options)
                .subscribe(function (data) {
                expect(data).toEqual(responseBody);
            });
        });
    })());
    it('returns the json when response is 200 for delete requests', new test_api_call_test_1.TestApi().expect({
        path: 'me/customradios',
        method: http_1.RequestMethod.Delete
    })
        .respondWith({
        body: { id: 123 },
        status: 200
    })
        .test(function (api) {
        api.authorised('DElETE', 'me/customradios')
            .subscribe(function (data) {
            expect(data).toEqual({ id: 123 });
        });
    }));
});
//# sourceMappingURL=api.test.js.map